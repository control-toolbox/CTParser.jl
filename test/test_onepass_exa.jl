# test onepass, exa parsing (aka parsing towards ExaModels)
# todo: add simple min time case (double integrator)

parsing_backend!(:exa)

e_prefix!(:CTBase) # exceptions in code generated by @def are prefixed by CTBase (not by OptimalControl - the default) for tests

function test_onepass_exa()
    __test_onepass_exa()
    if CUDA.functional()
        __test_onepass_exa(CUDABackend())
    else
        println("********** CUDA not available")
    end
end

function __test_onepass_exa(backend = nothing)

    println("onepass_exa: backend = ", isnothing(backend) ? "CPU" : "GPU")

    @testset "parsing backend" begin println("parsing backend")

        @test_throws String parsing_backend!(:foo)
        parsing_backend!(:exa) # back to normal

    end

    @testset "pragma" begin println("pragma")

        o = @def begin
                v = (a, b) ∈ R², variable
                t ∈ [0, 1], time
                x ∈ R³, state
                u ∈ R⁴, control
                PRAGMA(println("Barracuda sors de ce corps !"))
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                ∂(x₃)(t) == x₁(t)
                c = v₁ + b + x₁(0) + 2cos(x₃(1))
                c → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel

    end

    @testset "alias" begin println("alias")

        o = @def begin
                v = (a, b) ∈ R², variable
                t ∈ [0, 1], time
                x ∈ R³, state
                u ∈ R⁴, control
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                ∂(x₃)(t) == x₁(t)
                c = v₁ + b + x₁(0) + 2cos(x₃(1))
                c → min
        end
        @test o() isa ExaModels.ExaModel 
        @test o(; backend = backend) isa ExaModels.ExaModel
        @test o(; grid_size = 100) isa ExaModels.ExaModel
        @test o(; init = (1., 2., 3., 4., 5.)) isa ExaModels.ExaModel
        @test o(; base_type = Float32) isa ExaModels.ExaModel

        o = @def begin
                v = (a, b) ∈ R², variable
                t ∈ [0, 1], time
                x ∈ R, state
                u ∈ R⁴, control
                ∂(x₁)(t) == x₁(t)
                c = v₁ + b + x(0) + 2cos(x(1))
                c → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel

    end

    @testset "time" begin println("time")

       o = @def begin
                v = (a, b) ∈ R², variable
                t ∈ [a, 1], time
                x ∈ R, state
                u ∈ R⁴, control
                ∂(x₁)(t) == x₁(t)
                c = v₁ + b + x(a) + 2cos(x(1))
                c → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel

        o = @def begin
                v = (a, b) ∈ R², variable
                t ∈ [0, b], time
                x ∈ R, state
                u ∈ R⁴, control
                ∂(x₁)(t) == x₁(t)
                c = v₁ + b + x(0) + 2cos(x(b))
                c → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel

        o = @def begin
                v = (a, b) ∈ R², variable
                t ∈ [a, b], time
                x ∈ R, state
                u ∈ R⁴, control
                ∂(x₁)(t) == x₁(t)
                c = v₁ + b + x(a) + 2cos(x(b))
                c → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R, state
                u ∈ R⁴, control
                ∂(x₁)(t) == x₁(t)
                c = tf + x(0) + 2cos(x(tf))
                c → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel

        t0 = 0.0
        o = @def begin
                t ∈ [t0, 1], time
                x ∈ R², state
                u ∈ R, control
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                x₁(t0) + 2cos(x₂(1)) → min
        end

        tf = 1.0
        o = @def begin
                t ∈ [0, tf], time
                x ∈ R², state
                u ∈ R, control
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel

    end

    @testset "constraint" begin println("constraint")

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R², state
                u ∈ R, control
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                x₁(0) == 1
                x₂(tf) == 2
                -1 ≤ x₂(0) + x₁(tf) + tf ≤ 1
                tf ≤ 5
                tf^2 ≥ 5
                x₁(t) ≤ 1
                -1 ≤ u(t) ≤ 1
                cos(x₁(t)) ≤ 1
                cos(u(t)) ≤ 1
                x₁(t) + u(t) == 1
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R², state
                u ∈ R, control
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                -1 ≤ x₂(0) + x₁(tf) + tf ≤ [1, 2]
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test_throws ParsingError o(; backend = backend)

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R², state
                u ∈ R, control
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                tf^2 ≥ [1, 5]
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test_throws ParsingError o(; backend = backend)

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R², state
                u ∈ R, control
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                cos(x₁(t)) ≤ [1, 2]
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test_throws ParsingError o(; backend = backend)

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R², state
                u ∈ R, control
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                cos(u(t)) ≤ [1, 2]
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test_throws ParsingError o(; backend = backend)

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R², state
                u ∈ R, control
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                x₁(t) + u(t) == [1, 2]
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test_throws ParsingError o(; backend = backend)

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R⁴, state
                u ∈ R, control
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                ∂(x₃)(t) == x₁(t)
                ∂(x₄)(t) == x₁(t)
                x₁(0) == 1
                x[1:2:3](0) == [1, 2]
                x[1:3](0) == [1, 2, 3]
                x(0) == [1, 2, 3, 4]
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R⁴, state
                u ∈ R, control
                x₁(tf) == 1
                x[1:2:3](tf) == [1, 2]
                x[1:3](tf) == [1, 2, 3]
                x(tf) == [1, 2, 3, 4]
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                ∂(x₃)(t) == x₁(t)
                ∂(x₄)(t) == x₁(t)
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel

        o = @def begin
                v ∈ R⁴, variable
                t ∈ [0, 1], time
                x ∈ R⁴, state
                u ∈ R, control
                v₁ == 1
                v[1:2:3] == [1, 2]
                v[1:3] == [1, 2, 3]
                v == [1, 2, 3, 4]
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                ∂(x₃)(t) == x₁(t)
                ∂(x₄)(t) == x₁(t)
                x₁(0) + 2cos(x₂(1)) → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel
    
        o = @def begin
                t ∈ [0, 1], time
                x ∈ R⁴, state
                u ∈ R, control
                x₁(t) == 1
                x[1:2:3](t) == [1, 2]
                x[1:3](t) == [1, 2, 3]
                x(t) == [1, 2, 3, 4]
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                ∂(x₃)(t) == x₁(t)
                ∂(x₄)(t) == x₁(t)
                x₁(0) + 2cos(x₂(1)) → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel
    
        o = @def begin
                t ∈ [0, 1], time
                x ∈ R⁴, state
                u ∈ R⁵, control
                u₁(t) == 1
                u[2:2:4](t) == [1, 2]
                u[2:4](t) == [1, 2, 3]
                u(t) == [1, 2, 3, 4, 5]
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                ∂(x₃)(t) == x₁(t)
                ∂(x₄)(t) == x₁(t)
                x₁(0) + 2cos(x₂(1)) → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel

        o = @def begin
                v ∈ R³, variable
                t ∈ [0, 1], time
                x ∈ R⁴, state
                u ∈ R⁵, control
                v ≤ [1, 2, 3]
                v[1:2] ≥ [1, 2]
                u[2:2:4](t) ≤ [1, 2]
                u[2:4](t) ≥ [1, 2, 3]
                u[2:2:4](t) ≤ [1, 2]
                u[2:4](t) ≥ [1, 2, 3]
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                ∂(x₃)(t) == x₁(t)
                ∂(x₄)(t) == x₁(t)
                x₁(0) + 2cos(x₂(1)) → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel

    end
        
    @testset "variable range" begin println("variable range")

        o = @def begin
                v ∈ R⁵, variable
                t ∈ [0, 1], time
                x ∈ R³, state
                u ∈ R⁴, control
                0 ≤ v[1] ≤ 1
                [0, 0] ≤ v[2:3] ≤ [1, 1]
                [0, 0] ≤ v[2:2:5] ≤ [1, 1]
                [0, 0, 0, 0, 0] ≤ v ≤ [1, 1, 1, 1, 1]
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                ∂(x₃)(t) == x₁(t)
                x₁ → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel

    end

    @testset "state range" begin println("state range")

        o = @def begin
                v ∈ R², variable
                t ∈ [0, 1], time
                x ∈ R⁵, state
                u ∈ R⁴, control
                0 ≤ x[1](t) ≤ 1
                [0, 0] ≤ x[2:3](t) ≤ [1, 1]
                [0, 0] ≤ x[2:2:5](t) ≤ [1, 1]
                [0, 0, 0, 0, 0] ≤ x(t) ≤ [1, 1, 1, 1, 1]
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                ∂(x₃)(t) == x₁(t)
                ∂(x₄)(t) == x₁(t)
                ∂(x₅)(t) == x₁(t)
                x₁ → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel

    end

    @testset "control range" begin println("control range")

        o = @def begin
                v ∈ R², variable
                t ∈ [0, 1], time
                x ∈ R⁴, state
                u ∈ R⁵, control
                0 ≤ u[1](t) ≤ 1
                [0, 0] ≤ u[2:3](t) ≤ [1, 1]
                [0, 0] ≤ u[2:2:5](t) ≤ [1, 1]
                [0, 0, 0, 0, 0] ≤ u(t) ≤ [1, 1, 1, 1, 1]
                ∂(x₁)(t) == x₁(t)
                ∂(x₂)(t) == x₁(t)
                ∂(x₃)(t) == x₁(t)
                ∂(x₄)(t) == x₁(t)
                x₁ → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel

    end

    @testset "dynamics" begin println("dynamics")

        o = @def begin
                t ∈ [0, 1], time
                x ∈ R⁴, state
                u ∈ R⁵, control
                ẋ(t) == u[1:4](t)
                x₁(0) + 2cos(x₂(1)) → min
        end
        @test_throws ParsingError o(; backend = backend)

        o = @def begin
                t ∈ [0, 1], time
                x ∈ R⁴, state
                u ∈ R⁵, control
                x₁(0) + 2cos(x₂(1)) → min
        end
        @test_throws ParsingError o(; backend = backend)

        o = @def begin
                t ∈ [0, 1], time
                x ∈ R⁴, state
                u ∈ R⁵, control
                ∂(x₁)(t) == x₁(t) 
                ∂(x₂)(t) == x₁(t) 
                ∂(x₃)(t) == x₁(t) 
                x₁(0) + 2cos(x₂(1)) → min
        end
        @test_throws ParsingError o(; backend = backend)

        o = @def begin
                t ∈ [0, 1], time
                x ∈ R, state
                u ∈ R⁵, control
                x(t) + u₂(t) + t == 1
                ẋ(t) == t + u₁(t)
                x(0) + 2cos(x(1)) → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel
        @test_throws String o(; scheme = :foo)

    end

    @testset "lagrange cost" begin println("lagrange cost")

        o = @def begin
            t ∈ [0, 1], time
            x ∈ R², state
            u ∈ R, control
            x(0) == [-1, 0]
            x(1) == [0, 0]
            ∂(x₁)(t) == x₂(t)
            ∂(x₂)(t) == u(t)
            ∫( 0.5u(t)^2 ) → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel

    end

    @testset "use case no. 1: simple example (mayer)" begin println("use case no. 1: simple example (mayer)")

        o = @def begin
            t ∈ [0, 1], time
            x ∈ R³, state
            u ∈ R, control
            x(0) == [-1, 0, 0]
            x[1:2](1) == [0, 0]
            ∂(x₁)(t) == x₂(t)
            ∂(x₂)(t) == u(t)
            ∂(x₃)(t) == 0.5u(t)^2
            x₃(1) → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel
        m = o(; backend = backend)
        s = madnlp(m)
        @test s.objective ≈ 6 atol = 1e-2
        m = o(; backend = backend, grid_size = 1000)
        s = madnlp(m)
        @test s.objective ≈ 6 atol = 1e-3

    end

    @testset "use case no. 1: simple example (lagrange)" begin println("use case no. 1: simple example (lagrange)")

        o = @def begin
            t ∈ [0, 1], time
            x ∈ R², state
            u ∈ R, control
            x(0) == [-1, 0]
            x(1) == [0, 0]
            ∂(x₁)(t) == x₂(t)
            ∂(x₂)(t) == u(t)
            ∫( 0.5u(t)^2 ) → min
        end
        @test o(; backend = backend) isa ExaModels.ExaModel
        m = o(; backend = backend)
        tol = 1e-7
        s = madnlp(m; tol = tol)
        @test s.objective ≈ 6 atol = 1e-2
        m = o(; backend = backend, grid_size = 1000)
        s = madnlp(m; tol = tol)
        @test s.objective ≈ 6 atol = 1e-3

    end

    @testset "use case no. 2: Goddard" begin println("use case no. 2: Goddard")

        r0 = 1.0     
        v0 = 0.0
        m0 = 1.0 
        vmax = 0.1 
        mf = 0.6   
        Cd = 310.0
        Tmax = 3.5
        β = 500.0
        b = 2.0

        o = @def begin

            tf ∈ R, variable
            t ∈ [0, tf], time
            x = (r, v, m) ∈ R³, state
            u ∈ R, control

            x(0) == [r0, v0, m0]
            m(tf) == mf
            0 ≤ u(t) ≤ 1
            r(t) ≥ r0
            0 ≤ v(t) ≤ vmax

            ∂(r)(t) == v(t)
            ∂(v)(t) == -Cd * v(t)^2 * exp(-β * (r(t) - 1)) / m(t) - 1 / r(t)^2 + u(t) * Tmax / m(t)
            ∂(m)(t) == -b * Tmax * u(t)

            r(tf) → max

        end

        tfs = 0.18761155665063417
        xs = [ 1.0          1.00105   1.00398   1.00751    1.01009    1.01124
              -1.83989e-40  0.056163  0.1       0.0880311  0.0492518  0.0123601
               1.0          0.811509  0.650867  0.6        0.6        0.6 ]
        us = [0.599377 0.835887 0.387328 -5.87733e-9 -9.03538e-9 -8.62101e-9]
        N0 = length(us) - 1
        t = tfs * 0:N0
        _xs = linear_interpolation(t, [xs[:, j] for j ∈ 1:N0+1], extrapolation_bc=Line())
        _us = linear_interpolation(t, [us[:, j] for j ∈ 1:N0+1], extrapolation_bc=Line())

        # N = 200
        # exa0: o = -1.0125736217178989e+00, t = 89.562 ms, m = 3447 alloc
        # o = -1.0125736217159587e+00, 77.135 ms (4829 allocations: 157.13 MiB)
        # exa2: o = -1.0125790390647729e+00, t = 289.723 ms, m = 693293 alloc
        # o = -1.0125790380554995e+00, 152.611 ms (314769 allocations: 9.32 MiB) 
        N = 200 
        t = tfs * 0:N
        xs = _xs.(t); xs = stack(xs[:])
        us = _us.(t); us = stack(us[:])
        tol = 1e-7
        m = o(; backend = backend, grid_size = N, init = (tfs, xs, us))
        s = madnlp(m; tol = tol)
        @test s.objective ≈ -1.0125736217178989e+00 atol = 1e-5 # note: difference of 1e-5 with CUDA

    end

end