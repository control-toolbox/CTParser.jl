# test onepass, exa parsing (aka parsing towards ExaModels)
# todo:

parsing_backend!(:exa)

e_prefix!(:CTBase) # exceptions in code generated by @def are prefixed by CTBase (not by OptimalControl - the default) for tests

function test_onepass_exa()

# debug    @testset "parsing backend" begin
#        parsing_backend!(:foo)
#        @test_throws ParsingError @def PRAGMA(nothing)
#        @@test_throws ParsingError @def o PRAGMA(nothing)
#        parsing_backend!(:exa) # back to normal
#    end

    @testset "pragma" begin

        o = @def begin
                v = (a, b) ∈ R², variable
                t ∈ [0, 1], time
                x ∈ R³, state
                u ∈ R⁴, control
                PRAGMA(println("Barracuda sors de ce corps !"))
                c = v₁ + b + x₁(0) + 2cos(x₃(1))
                c → min
        end
        @test o() isa ExaModels.ExaModel

    end

    @testset "alias" begin

        o = @def begin
                v = (a, b) ∈ R², variable
                t ∈ [0, 1], time
                x ∈ R³, state
                u ∈ R⁴, control
                c = v₁ + b + x₁(0) + 2cos(x₃(1))
                c → min
        end
        @test o() isa ExaModels.ExaModel
        @test o(; grid_size = 100) isa ExaModels.ExaModel
        @test o(; backend = nothing) isa ExaModels.ExaModel
        @test o(; init = (1., 2., 3., 4., 5.)) isa ExaModels.ExaModel
        @test o(; base_type = Float32) isa ExaModels.ExaModel

        o = @def begin
                v = (a, b) ∈ R², variable
                t ∈ [0, 1], time
                x ∈ R, state
                u ∈ R⁴, control
                c = v₁ + b + x(0) + 2cos(x(1))
                c → min
        end
        @test o() isa ExaModels.ExaModel


    end

    @testset "time" begin

       o = @def begin
                v = (a, b) ∈ R², variable
                t ∈ [a, 1], time
                x ∈ R, state
                u ∈ R⁴, control
                c = v₁ + b + x(a) + 2cos(x(1))
                c → min
        end
        @test o() isa ExaModels.ExaModel

        o = @def begin
                v = (a, b) ∈ R², variable
                t ∈ [0, b], time
                x ∈ R, state
                u ∈ R⁴, control
                c = v₁ + b + x(0) + 2cos(x(b))
                c → min
        end
        @test o() isa ExaModels.ExaModel

        o = @def begin
                v = (a, b) ∈ R², variable
                t ∈ [a, b], time
                x ∈ R, state
                u ∈ R⁴, control
                c = v₁ + b + x(a) + 2cos(x(b))
                c → min
        end
        @test o() isa ExaModels.ExaModel

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R, state
                u ∈ R⁴, control
                c = tf + x(0) + 2cos(x(tf))
                c → min
        end
        @test o() isa ExaModels.ExaModel

        t0 = 0
        o = @def begin
                t ∈ [t0, 1], time
                x ∈ R², state
                u ∈ R, control
                x₁(t0) + 2cos(x₂(1)) → min
        end

        tf = 1
        o = @def begin
                t ∈ [0, tf], time
                x ∈ R², state
                u ∈ R, control
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test o() isa ExaModels.ExaModel

    end

    @testset "constraint" begin

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R², state
                u ∈ R, control
                x₁(0) == 1
                x₂(tf) == 2
                -1 ≤ x₂(0) + x₁(tf) + tf ≤ 1
                tf ≤ 5
                tf^2 ≥ 5
                x₁(t) ≤ 1
                -1 ≤ u(t) ≤ 1
                cos(x₁(t)) ≤ 1
                cos(u(t)) ≤ 1
                x₁(t) + u(t) == 1
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test o() isa ExaModels.ExaModel

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R², state
                u ∈ R, control
                -1 ≤ x₂(0) + x₁(tf) + tf ≤ [1, 2]
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test_throws ParsingError o()

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R², state
                u ∈ R, control
                tf^2 ≥ [1, 5]
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test_throws ParsingError o()

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R², state
                u ∈ R, control
                cos(x₁(t)) ≤ [1, 2]
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test_throws ParsingError o()

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R², state
                u ∈ R, control
                cos(u(t)) ≤ [1, 2]
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test_throws ParsingError o()

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R², state
                u ∈ R, control
                x₁(t) + u(t) == [1, 2]
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test_throws ParsingError o()

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R⁴, state
                u ∈ R, control
                x₁(0) == 1
                x[1:2:3](0) == [1, 2]
                x[1:3](0) == [1, 2, 3]
                x(0) == [1, 2, 3, 4]
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test o() isa ExaModels.ExaModel

        o = @def begin
                tf ∈ R, variable
                t ∈ [0, tf], time
                x ∈ R⁴, state
                u ∈ R, control
                x₁(tf) == 1
                x[1:2:3](tf) == [1, 2]
                x[1:3](tf) == [1, 2, 3]
                x(tf) == [1, 2, 3, 4]
                x₁(0) + 2cos(x₂(tf)) → min
        end
        @test o() isa ExaModels.ExaModel

        o = @def begin
                v ∈ R⁴, variable
                t ∈ [0, 1], time
                x ∈ R⁴, state
                u ∈ R, control
                v₁ == 1
                v[1:2:3] == [1, 2]
                v[1:3] == [1, 2, 3]
                v == [1, 2, 3, 4]
                x₁(0) + 2cos(x₂(1)) → min
        end
        @test o() isa ExaModels.ExaModel
    
        o = @def begin
                t ∈ [0, 1], time
                x ∈ R⁴, state
                u ∈ R, control
                x₁(t) == 1
                x[1:2:3](t) == [1, 2]
                x[1:3](t) == [1, 2, 3]
                x(t) == [1, 2, 3, 4]
                x₁(0) + 2cos(x₂(1)) → min
        end
        @test o() isa ExaModels.ExaModel
    
        o = @def begin
                t ∈ [0, 1], time
                x ∈ R⁴, state
                u ∈ R⁵, control
                u₁(t) == 1
                u[2:2:4](t) == [1, 2]
                u[2:4](t) == [1, 2, 3]
                u(t) == [1, 2, 3, 4, 5]
                x₁(0) + 2cos(x₂(1)) → min
        end
        @test o() isa ExaModels.ExaModel

    end
    
    @testset "dynamics" begin

        o = @def begin
                t ∈ [0, 1], time
                x ∈ R⁴, state
                u ∈ R⁵, control
                ẋ(t) == u[1:4](t)
                x₁(0) + 2cos(x₂(1)) → min
        end
        @test_throws ParsingError o()

        o = @def begin
                t ∈ [0, 1], time
                x ∈ R, state
                u ∈ R⁵, control
                x(t) + u₂(t) + t == 1
                ẋ(t) == t + u₁(t)
                x(0) + 2cos(x(1)) → min
        end
        @test o() isa ExaModels.ExaModel
        # debug @test_throws Exception o(; scheme = :foo) # not a ParsingError, just an exception forwarded by __throw

    end

    @testset "use case no. 1: simple example" begin

        o = @def begin
            t ∈ [0, 1], time
            x ∈ R³, state
            u ∈ R, control
            x(0) == [-1, 0, 0]
            x[1:2](1) == [0, 0]
            ∂(x₁)(t) == x₂(t)
            ∂(x₂)(t) == u(t)
            ∂(x₃)(t) == 0.5u(t)^2
            x₃(1) → min
        end
        @test o() isa ExaModels.ExaModel
        m = o()
        s = madnlp(m)
        @test s.objective ≈ 6 atol = 1e-3
        m = o(; grid_size = 1000)
        s = madnlp(m)
        @test s.objective ≈ 6 atol = 1e-4

    end

    @testset "use case no. 2: Goddard" begin

        r0 = 1      
        v0 = 0     
        m0 = 1    
        vmax = 0.1 
        mf = 0.6   
        Cd = 310
        Tmax = 3.5
        β = 500
        b = 2

        o = @def begin

            tf ∈ R, variable
            t ∈ [0, tf], time
            x = (r, v, m) ∈ R³, state
            u ∈ R, control

            x(0) == [r0, v0, m0]
            m(tf) == mf
            0 ≤ u(t) ≤ 1
            r(t) ≥ r0
            0 ≤ v(t) ≤ vmax

            ∂(r)(t) == v(t)
            ∂(v)(t) == -Cd * v(t)^2 * exp(-β * (r(t) - 1)) / m(t) - 1 / r(t)^2 + u(t) * Tmax / m(t)
            ∂(m)(t) == -b * Tmax * u(t)

            r(tf) → max

        end
        tfs = 0.18761155665063417
        xs = [ 1.0          1.00105   1.00398   1.00751    1.01009    1.01124
              -1.83989e-40  0.056163  0.1       0.0880311  0.0492518  0.0123601
               1.0          0.811509  0.650867  0.6        0.6        0.6 ]
        us = [0.599377 0.835887 0.387328 -5.87733e-9 -9.03538e-9 -8.62101e-9]
        m = o(; grid_size = length(us) - 1, init = (tfs, xs, us))
        sm = madnlp(m)
        @test sm.objective ≈ -1.01 atol = 1e-2
        si = ipopt(m)
        @test si.objective ≈ -1.01 atol = 1e-2
        @test sm.objective ≈ si.objective atol = 1e-2

    end

end